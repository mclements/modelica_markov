/*
(defun f902r (p1 p2)
  (interactive "r")
  (condition-case err
      (save-excursion
	(narrow-to-region p1 p2)
	(let ((replace (lambda (pattern val)
			 (goto-char 0)
			 (while (search-forward-regexp pattern nil t)
			   (replace-match val t nil)))))
	  (funcall replace "\\([&]\n[&]\\)" "")
	  (funcall replace "\\([*][*]\\)" "^")
	  (widen)))
    (error
     (widen) ; ensure that (widen) is always called
     (debug err))))
*/

load(f90)$
/* Convert f90 output to R /in a region/ using M-x f902r. */
/* survival::survreg formulation for Weibull regression: shape=exp(alpha) and scale=exp(-beta) (!) */
Hweibull : (t*exp(beta))^exp(alpha);
hweibull : diff(Hweibull,t);
f90(diff(hweibull,alpha));
/*
exp(exp(alpha)*beta+2*alpha)*t^(exp(alpha)-1)*log(t)+(exp(alpha)*beta+1)*exp(exp(alpha)*beta+alpha)*t^(exp(alpha)-1)
*/
f90(diff(hweibull,beta));
/*
exp(exp(alpha)*beta+2*alpha)*t^(exp(alpha)-1)
*/

f90(diff(hweibull,t));
/*
(exp(alpha)-1)*exp(exp(alpha)*beta+alpha)*t^(exp(alpha)-2)
*/



